trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '**'
    exclude:
      - 'README.md'
      - '.gitignore'

variables:
  - group: 'DevOps_Technical_Assessment'
  - name: 'DOCKER_REGISTRY'
    value: '$(ACR_NAME).azurecr.io'
  - name: 'DOCKER_IMAGE_NAME'
    value: 'devops_technical_assessment'
  - name: 'DOCKER_IMAGE_TAG'
    value: '$(Build.BuildId)'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: Build
        displayName: 'Build and Test'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci
              npm test
              npm run build
            displayName: 'Install dependencies, run tests and build'

          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              command: buildAndPush
              repository: $(DOCKER_IMAGE_NAME)
              dockerfile: Dockerfile
              containerRegistry: |
                {
                  "type": "dockerregistry",
                  "connection": {
                    "id": "$(ACR_SERVICE_CONNECTION)",
                    "name": "$(ACR_NAME)"
                  }
                }
              tags: |
                $(DOCKER_IMAGE_TAG)
                latest

  - stage: Deploy
    displayName: 'Deploy to Dev'
    condition: succeeded()
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: 'Deploy to Dev'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              appName: '$(WEB_APP_NAME)'
              containers: '$(DOCKER_REGISTRY)/$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)'
              resourceGroupName: '$(RESOURCE_GROUP)'

          - task: AzureCLI@2
            displayName: 'Verify Deployment'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Verifying deployment..."
                curl -s -o /dev/null -w "%{http_code}" https://$(WEB_APP_NAME).azurewebsites.net
                echo "Deployment verification complete" 